<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file was part of GtkSourceView

 Author: Archit Baweja <bighead@users.sourceforge.net>
 Copyright (C) 2004 Archit Baweja <bighead@users.sourceforge.net>
 Copyright (C) 2005 Michael Witrant <mike@lepton.fr>
 Copyright (C) 2006 Gabriel Bauman <gabe@codehaus.org>
 Copyright (C) 2013 Jesse van den Kieboom <jessevdk@gnome.org>
 Copyright (C) 2019 Yukihiro Nakai
 Copyright (C) 2020 Hugo Parente Lima <hugo.pl@gmail.com>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, see <http://www.gnu.org/licenses/>.

-->
<language id="ruby" name="Ruby" version="2.0" _section="Script">
  <metadata>
    <property name="mimetypes">application/x-ruby;text/x-ruby</property>
    <property name="globs">*.rb;*.rake;*.gemspec;Rakefile;Capfile;Gemfile</property>
    <property name="line-comment-start">#</property>
  </metadata>

  <styles>
    <style id="escape"               name="Escaped Character"     map-to="def:special-char"/>
    <style id="comment"              name="Comment"               map-to="def:comment"/>
    <style id="attribute-definition" name="Attribute Definition"  map-to="def:statement"/>
    <style id="module-handler"       name="Module handler"        map-to="def:preprocessor"/>
    <style id="keyword"              name="Keyword"               map-to="def:keyword"/>
    <style id="function-definition"  name="Function Definition"   map-to="def:function"/>
    <style id="type-definition"      name="Type Definition"       map-to="def:function"/>
    <style id="nil-value"            name="Nil Constant"          map-to="def:special-constant"/>
    <style id="boolean"              name="Boolean value"         map-to="def:boolean"/>
    <style id="floating-point"       name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"              name="Decimal number"        map-to="def:decimal"/>
    <style id="base-n-integer"       name="Base-N number"         map-to="def:base-n-integer"/>
    <style id="numeric-literal"      name="Numeric literal"       map-to="def:base-n-integer"/>
    <style id="character-literal"    name="Character literal"     map-to="def:string"/>
    <style id="string"               name="String"                map-to="def:string"/>
    <style id="literal"              name="Literal"               map-to="def:special-char"/>
    <style id="builtin"              name="Builtin"               map-to="def:type"/>
    <style id="constant"             name="Constant"              map-to="def:type"/>
    <style id="symbol"               name="Symbol"                map-to="def:decimal"/>
    <style id="predefined-variable"  name="Predefined Variable"   map-to="def:identifier"/>
    <style id="variable"             name="Variable"              map-to="def:identifier"/>
    <style id="here-doc"             name="Heredoc"               map-to="def:string" />
    <style id="here-doc-bound"       name="Heredoc Bound"         map-to="def:string"/>
    <style id="regex"                name="Regular Expression"    map-to="def:string"/>
    <style id="operator"             name="Operator"              map-to="def:operator"/>
  </styles>

  <definitions>
    <define-regex id="identifier">[\._a-zA-Z0-9=\&lt;\&gt;\[\]\!\?]+</define-regex>
    <define-regex id="simple-escape" extended="true">
      \\ (?: [0-7]{1,3} | x[0-9A-Fa-f]{1,2} | [^cuxCM] )
    </define-regex>

    <define-regex id="unicode-escape" extended="true">
      \\u
      (?:
        [0-9A-Fa-f]{4} |
        { \s*
        (?&gt;
          (?:
            [0-9A-Fa-f]{1,6} (?: \s+ [0-9A-Fa-f]{1,6} )*
          )?
        )
        \s* }
      )
    </define-regex>

    <define-regex id="meta-control-escape" extended="true">
      (?&lt;! \\c | \\C- | \\M- )
      \\
      (?:
        c  (?: \\M- )? |
        C- (?: \\M- )? |
        M- (?: \\c | \\C- )?
      )
      (?: \%{simple-escape} | [^\\] )
    </define-regex>

    <define-regex id="escape" extended="true">
      (?: \%{unicode-escape} | \%{meta-control-escape} | \%{simple-escape} )
    </define-regex>

    <context id="escape" style-ref="escape">
      <match>\%{escape}</match>
    </context>

    <context id="multiline-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
      <start>^=begin</start>
      <end>^=end</end>
      <include>
        <context ref="escape"/>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="attribute-definitions" style-ref="attribute-definition">
      <keyword>attr</keyword>
      <keyword>attr_writer</keyword>
      <keyword>attr_reader</keyword>
      <keyword>attr_accessor</keyword>
    </context>

    <context id="definitions" style-ref="keyword">
      <!-- do not highlight the .class method -->
      <prefix>(?&lt;![\w\.])</prefix>
      <keyword>alias</keyword>
      <keyword>class</keyword>
      <keyword>module</keyword>
      <keyword>def</keyword>
      <keyword>undef</keyword>
    </context>

    <context id="module-handlers" style-ref="module-handler">
      <prefix>(?&lt;![\w\.])</prefix>
      <keyword>require</keyword>
      <keyword>require_relative</keyword>
      <keyword>include</keyword>
      <keyword>load</keyword>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>BEGIN</keyword>
      <keyword>END</keyword>
      <keyword>and</keyword>
      <keyword>begin</keyword>
      <keyword>break</keyword>
      <keyword>case</keyword>
      <keyword>catch</keyword>
      <keyword>defined?</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>elsif</keyword>
      <keyword>end</keyword>
      <keyword>ensure</keyword>
      <keyword>for</keyword>
      <keyword>if</keyword>
      <keyword>in</keyword>
      <keyword>next</keyword>
      <keyword>not</keyword>
      <keyword>or</keyword>
      <keyword>private</keyword>
      <keyword>protected</keyword>
      <keyword>public</keyword>
      <keyword>raise</keyword>
      <keyword>redo</keyword>
      <keyword>rescue</keyword>
      <keyword>retry</keyword>
      <keyword>return</keyword>
      <keyword>super</keyword>
      <keyword>then</keyword>
      <keyword>throw</keyword>
      <keyword>unless</keyword>
      <keyword>until</keyword>
      <keyword>when</keyword>
      <keyword>while</keyword>
      <keyword>yield</keyword>
    </context>

    <context id="builtins" style-ref="builtin">
      <keyword>ARGF</keyword>
      <keyword>ARGV</keyword>
      <keyword>RUBY_PLATFORM</keyword>
      <keyword>RUBY_RELEASE_DATE</keyword>
      <keyword>RUBY_VERSION</keyword>
      <keyword>STDERR</keyword>
      <keyword>STDIN</keyword>
      <keyword>STDOUT</keyword>
      <keyword>__FILE__</keyword>
      <keyword>__LINE__</keyword>
    </context>

    <context id="predefined-variables" style-ref="predefined-variable">
      <match extended="true">
        \$([!$&amp;"'*+,./0:;&lt;=&gt;?@\`~1-9]|
           -[0FIKadilpvw]|
           (self|deferr|defout|stderr|stdin|stdout|
            DEBUG|FILENAME|KCODE|LOADED_FEATURES|LOAD_PATH|
            PROGRAM_NAME|SAFE|VERBOSE)\b)
      </match>
    </context>

    <context id="global-variables" style-ref="variable">
      <match>\$[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="class-variables" style-ref="variable">
      <match>@@[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="instance-variables" style-ref="variable">
      <match>@[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="symbols" style-ref="symbol">
      <match>(?&lt;!:):[a-zA-Z0-9_]+</match>
    </context>

    <context id="regexp-variables" style-ref="regex">
      <match>\$[1-9][0-9]*</match>
    </context>

    <context id="constants" style-ref="constant">
      <match>(::)?\b[A-Z][A-Za-z0-9_]*\b</match>
    </context>

    <context id="nil-value" style-ref="nil-value">
      <prefix>(?&lt;!\.)</prefix>
      <keyword>nil</keyword>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>false</keyword>
      <keyword>true</keyword>
    </context>

    <define-regex id="underscore_num">\d(_?\d)*</define-regex>

    <define-regex id="float" extended="true">
      ( \%{underscore_num}\.\%{underscore_num} ) |
      ( (\%{underscore_num}(\.\%{underscore_num})?)[eE][+-]?\%{underscore_num} )
    </define-regex>

    <context id="float" style-ref="floating-point">
      <match>(?&lt;!\.\.\.\.)((?&lt;![\w\.])|(?&lt;=\.\.))\%{float}((?![\w\.])|(?=\.\.)|(?=\.[a-zA-Z_]))(?!\.\.\.\.)</match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match>(?&lt;!\.\.\.\.)((?&lt;![\w\.])|(?&lt;=\.\.))([1-9](_?[0-9])*|0)((?![\w\.])|(?=\.\.)|(?=\.[a-zA-Z_]))(?!\.\.\.\.)</match>
    </context>

    <context id="hex" style-ref="base-n-integer">
      <match>(?&lt;!\.\.\.\.)((?&lt;![\w\.])|(?&lt;=\.\.))0[xX][0-9A-Fa-f](_?[0-9A-Fa-f])*((?![\w\.])|(?=\.\.)|(?=\.[a-zA-Z_]))(?!\.\.\.\.)</match>
    </context>

    <context id="octal" style-ref="base-n-integer">
      <match>(?&lt;!\.\.\.\.)((?&lt;![\w\.])|(?&lt;=\.\.))0[0-7](_?[0-7])*((?![\w\.])|(?=\.\.)|(?=\.[a-zA-Z_]))(?!\.\.\.\.)</match>
    </context>

    <context id="binary" style-ref="base-n-integer">
      <match>(?&lt;!\.\.\.\.)((?&lt;![\w\.])|(?&lt;=\.\.))0[bB][01](_?[01])*((?![\w\.])|(?=\.\.)|(?=\.[a-zA-Z_]))(?!\.\.\.\.)</match>
    </context>

    <context id="character-literal" style-ref="character-literal">
      <match>(?&lt;!\w)\?(\%{escape}|[^\\\s])(?!\w)</match>
    </context>

    <!-- in double quotes and backticks -->
    <context id="simple-interpolation">
      <start>#(?=[@$])</start> <!-- need assertion to not highlight single # -->
      <end></end>
      <include>
        <context ref="class-variables"/>
        <context ref="instance-variables"/>
        <context ref="global-variables"/>
      </include>
    </context>

    <!-- in double quotes and backticks -->
    <!-- FIXME: really would like for the syntax highlight to go back
         to none here, as any ruby code could go here -->
    <context id="complex-interpolation">
      <start>#{</start>
      <end>}</end>
      <include>
        <context ref="ruby:*"/>
      </include>
    </context>

    <context id="inside-interpolated-string">
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- ruby strings do not end at line end,
         so we cannot use def:string
         (parts lifted from perl.lang) -->
    <context id="double-quoted-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="inside-interpolated-string"/>
      </include>
    </context>

    <context id="single-quoted-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>'</start>
      <end>'</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <context id="backtick-quoted-string" style-ref="string">
      <start>`</start>
      <end>`</end>
      <include>
        <context ref="inside-interpolated-string"/>
      </include>
    </context>

    <context id="here-doc-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;([a-zA-Z_]\w*)</start>
      <end>^\%{1@start}</end>
      <include>
        <context ref="inside-interpolated-string"/>
      </include>
    </context>

    <context id="here-doc-indented-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;[-~]([a-zA-Z_]\w*)</start>
      <end>^\s*\%{1@start}</end>
      <include>
        <context ref="inside-interpolated-string"/>
      </include>
    </context>

    <context id="here-doc-single-quoted-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;'(\w+)'</start>
      <end>^\%{1@start}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
      </include>
    </context>

    <context id="here-doc-double-quoted-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;"(\w+)"</start>
      <end>^\%{1@start}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
        <context ref="inside-interpolated-string"/>
      </include>
    </context>

    <context id="interpolated-literal">
      <include>
        <context style-ref="string" style-inside="true">
          <start>[%][QWx]?\(</start>
          <end>\)</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context ref="inside-interpolated-string"/>
            <context>
              <start>\(</start>
              <end>\)</end>
            </context>
          </include>
        </context>

        <context style-ref="string" style-inside="true" >
          <start>[%][QWx]?\[</start>
          <end>]</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context ref="inside-interpolated-string"/>
            <context>
              <start>\[</start>
              <end>]</end>
            </context>

          </include>
        </context>

        <context style-ref="string" style-inside="true">
          <start>[%][QWx]?{</start>
          <end>}</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context ref="inside-interpolated-string"/>
            <context>
              <start>{</start>
              <end>}</end>
            </context>
          </include>
        </context>

        <context style-ref="string" style-inside="true">
          <start>[%][QWx]?&lt;</start>
          <end>&gt;</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context ref="inside-interpolated-string"/>
            <context>
              <start>&lt;</start>
              <end>&gt;</end>
            </context>
          </include>
        </context>

        <context style-ref="string" style-inside="true">
          <start>[%][QWx]?([^[:alnum:]{&lt;[(])</start>
          <end>\%{1@start}</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context ref="inside-interpolated-string"/>
          </include>
        </context>
      </include>
    </context>

    <context id="non-interpolated-literal">
      <include>
        <context style-ref="string" style-inside="true">
          <start>[%][qsw]\(</start>
          <end>\)</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context style-ref="escape">
              <match>\\['\\]</match>
            </context>
            <context>
              <start>\(</start>
              <end>\)</end>
            </context>
          </include>
        </context>

        <context style-ref="string" style-inside="true">
          <start>[%][qsw]\[</start>
          <end>]</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context style-ref="escape">
              <match>\\['\\]</match>
            </context>
            <context>
              <start>\[</start>
              <end>]</end>
            </context>
          </include>
        </context>

        <context style-ref="string" style-inside="true">
          <start>[%][qsw]\{</start>
          <end>\}</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context style-ref="escape">
              <match>\\['\\]</match>
            </context>
            <context>
              <start>\{</start>
              <end>\}</end>
            </context>
          </include>
        </context>

        <context style-ref="string" style-inside="true">
          <start>[%][qsw]&lt;</start>
          <end>&gt;</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context style-ref="escape">
              <match>\\['\\]</match>
            </context>
            <context>
              <start>&lt;</start>
              <end>&gt;</end>
            </context>
          </include>
        </context>

        <context style-ref="string" style-inside="true">
          <start>[%][qsw]([^[:alnum:]{&lt;[(])</start>
          <end>\%{1@start}</end>
          <include>
            <context where="start" sub-pattern="0" style-ref="literal"/>
            <context where="end" sub-pattern="0" style-ref="literal"/>

            <context style-ref="escape">
              <match>\\['\\]</match>
            </context>
          </include>
        </context>
      </include>
    </context>

    <define-regex id="regex-opts">[iomx]*[neus]?[iomx]*</define-regex>

    <context id="regex-bracketed" style-ref="escape" style-inside="true">
      <start>(?&lt;!\\)[[]</start>
      <end>(?&lt;!\\)]</end>
    </context>

    <context id="regex-alt-form" style-ref="regex">
      <start>\%r\|</start>
      <end>\|\%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
        <context ref="regex-bracketed"/>
       </include>
     </context>

    <context id="regex-simple" style-ref="regex">
      <start extended="true">
        ((?&lt;=([(]|\s))|^)
        \/
        (?=
          ([^/\\]*(\\.))*
          [^/]*
          \/
          \%{regex-opts}
          ([),;.]|\s|$)
        )</start>
      <end>\/\%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
        <context ref="regex-bracketed"/>
      </include>
    </context>

    <!-- 'def' is also present in the 'keyword' context, but has a lower
         priority, so 'def' is highlighted even if the function name doesn't match. -->
    <context id="function-definition">
      <match extended="true">
        (?&lt;![\w\.])(def)
        \s+
        (\%{identifier})
      </match>
      <include>
        <context sub-pattern="1" style-ref="keyword"/>
        <context sub-pattern="2" style-ref="function-definition"/>
      </include>
    </context>

    <context id="type-definition">
      <match extended="true">
        (?&lt;![\w\.])(class|module)
        \s+
        ((?:\%{identifier}(?:::)?)+(?:\s+&lt;\s+(?:\%{identifier}(?:::)?)+)?)
      </match>
      <include>
        <context sub-pattern="1" style-ref="keyword"/>
        <context sub-pattern="2" style-ref="type-definition"/>
      </include>
    </context>

    <context id="operators" style-ref="operator" extend-parent="false">
      <match>(!=|!~|!\b|[-^/\=\+\*&amp;&lt;&gt;~])</match>
    </context>

    <context id="ruby" class="no-spell-check">
      <include>
        <context ref="def:shebang"/>
        <context ref="def:shell-like-comment"/>
        <context ref="multiline-comment"/>
        <context ref="here-doc-single-quoted-string"/>
        <context ref="here-doc-double-quoted-string"/>
        <context ref="here-doc-string"/>
        <context ref="here-doc-indented-string"/>
        <context ref="double-quoted-string"/>
        <context ref="single-quoted-string"/>
        <context ref="backtick-quoted-string"/>
        <context ref="attribute-definitions"/>
        <context ref="function-definition"/>
        <context ref="type-definition"/>
        <context ref="definitions"/>
        <context ref="module-handlers"/>
        <context ref="keywords"/>
        <context ref="builtins"/>
        <context ref="predefined-variables"/>
        <context ref="global-variables"/>
        <context ref="class-variables"/>
        <context ref="instance-variables"/>
        <context ref="symbols"/>
        <context ref="regexp-variables"/>
        <context ref="constants"/>
        <context ref="nil-value"/>
        <context ref="boolean"/>
        <context ref="float"/>
        <context ref="decimal"/>
        <context ref="hex"/>
        <context ref="octal"/>
        <context ref="binary"/>
        <context ref="character-literal"/>
        <context ref="regex-alt-form"/>
        <context ref="regex-simple"/>
        <context ref="non-interpolated-literal"/>
        <context ref="interpolated-literal"/>
        <context ref="operators"/>
      </include>
    </context>
  </definitions>
</language>
